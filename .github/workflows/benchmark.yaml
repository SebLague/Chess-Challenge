name: Benchmark

on:
  workflow_call:
    inputs:
      opponent:
        required: true
        type: string
      opponent_long:
        required: false
        type: string
      threads:
        required: true
        type: number
      jobs:
        required: false
        type: number
      fens:
        required: false
        type: number
      run:
        required: false
        type: string
    outputs:
      wins:
        value: ${{ jobs.combine.outputs.wins }}
      draws:
        value: ${{ jobs.combine.outputs.draws }}
      losses:
        value: ${{ jobs.combine.outputs.losses }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      chunks: ${{ steps.prepare.outputs.chunks }}
      offset: ${{ steps.prepare.outputs.offset }}
      key: ${{ steps.prepare.outputs.key }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Prepare
        id: prepare
        run: |
          JOBS=${{ inputs.jobs || 1 }}
          if [ -n '${{ inputs.fens || '' }}' ]; then
            sed -n "1,${{ inputs.fens }}p" Chess-Challenge/resources/Fens.txt > tmp.txt
            mv tmp.txt Chess-Challenge/resources/Fens.txt
          fi
          LINES=$(wc -l < Chess-Challenge/resources/Fens.txt)
          OFFSET=$((LINES / JOBS + (LINES % JOBS != 0)))
          JOBS=$((LINES / OFFSET + (LINES % OFFSET != 0)))
          CHUNKS="[$(seq 0 $((JOBS - 1)) | tr '\n' ',' | sed 's/,$//')]"
          SUFFIX=$(openssl rand -hex 4)
          KEY="${{inputs.opponent}}_$SUFFIX"
          echo "::notice title=Benchmark against ${{inputs.opponent_long || inputs.opponent }} ($SUFFIX)::$LINES FENs, $JOBS jobs with ${{ inputs.threads }} threads, $OFFSET FENs per job"
          echo "chunks=$CHUNKS" >> $GITHUB_OUTPUT
          echo "offset=$OFFSET" >> $GITHUB_OUTPUT
          echo "key=$KEY" >> $GITHUB_OUTPUT


  benchmark:
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        chunk: ${{ fromJson(needs.prepare.outputs.chunks) }}
    outputs:
      wins: ${{ steps.benchmark.outputs.wins }}
      draws: ${{ steps.benchmark.outputs.draws }}
      losses: ${{ steps.benchmark.outputs.losses }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Setup Xvfb
      run: |
        sudo apt-get install -y xvfb
        Xvfb :99 &
        echo "DISPLAY=:99.0" >> $GITHUB_ENV

    - name: Prepare
      run: ${{ inputs.run || 'echo "Nothing to prepare"' }}

    - name: Run Benchmark
      id: benchmark
      run: |
        START_LINE=$(( ${{ matrix.chunk }} * ${{ needs.prepare.outputs.offset }} + 1 ))
        END_LINE=$(( $START_LINE + ${{ needs.prepare.outputs.offset }} - 1 ))
        sed -n "${START_LINE},${END_LINE}p" Chess-Challenge/resources/Fens.txt > temp.txt
        mv temp.txt Chess-Challenge/resources/Fens.txt
        echo "=== benchmark.yaml FENS ==="
        cat Chess-Challenge/resources/Fens.txt
        echo "=== benchmark.yaml FENS ==="

        ./scripts/benchmark.sh ${{ inputs.threads }} ${{ inputs.opponent }}> >(tee output.log)

        WINS=$(grep -oP 'Benchmark finished: \+\K\d+' output.log)
        DRAWS=$(grep -oP 'Benchmark finished: \+\d+ =\K\d+' output.log)
        LOSSES=$(grep -oP 'Benchmark finished: \+\d+ =\d+ -\K\d+' output.log)
        echo "+$WINS =$DRAWS -$LOSSES" >> res_${{ matrix.chunk }}.txt

    - name: Upload Results
      uses: actions/upload-artifact@v3
      with:
        name: res_${{ needs.prepare.outputs.key }}
        path: res_${{ matrix.chunk }}.txt

  combine:
    runs-on: ubuntu-latest
    needs:
      - benchmark
      - prepare
    outputs:
      wins: ${{ steps.combine.outputs.wins }}
      draws: ${{ steps.combine.outputs.draws }}
      losses: ${{ steps.combine.outputs.losses }}

    steps:
    - name: Download results
      uses: actions/download-artifact@v3

    - name: Combine results
      id: combine
      run: |
        wins=0
        draws=0
        losses=0
        for file in res_${{ needs.prepare.outputs.key }}/*; do
          RESULT=$(cat $file)
          wins=$((wins + $(echo $RESULT | grep -oP '\+\K\d+')))
          draws=$((draws + $(echo $RESULT | grep -oP '=\K\d+')))
          losses=$((losses + $(echo $RESULT | grep -oP '\-\K\d+')))
        done
        echo "wins=$wins" >> $GITHUB_OUTPUT
        echo "draws=$draws" >> $GITHUB_OUTPUT
        echo "losses=$losses" >> $GITHUB_OUTPUT

