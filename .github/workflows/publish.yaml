name: Benchmark & Publish

on:
  workflow_call:
    inputs:
      opponent:
        required: true
        type: string
      wins:
        required: true
        type: number
      draws:
        required: true
        type: number
      losses:
        required: true
        type: number
      head_ref:
        required: false
        type: string

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      elo_difference: ${{ steps.elo.outputs.result }}
    steps:
      # see https://3dkingdoms.com/chess/elo.htm
      - name: Calculate Elo difference
        uses: actions/github-script@v6
        id: elo
        with:
          result-encoding: string
          script: |
            function CalculateElo(wins, draws, losses)
            {
              const score = wins + draws/2;
              const total = wins + draws + losses;
              const percentage = (score /  total);
              const EloDifference = -400 * Math.log(1 / percentage - 1) / Math.LN10;

              return (EloDifference > 0 ? "+" : "") + Math.round(EloDifference);
            }

            function CalculateErrorMargin( wins, draws, losses )
            {
              const total = wins + draws + losses;
              const winP = wins / total;
              const drawP = draws / total;
              const lossP = losses / total;
              const percentage = (wins + draws * 0.5) / total;
              const winsDev = winP * Math.pow(1 - percentage, 2);
              const drawsDev = drawP * Math.pow(0.5 - percentage, 2);
              const lossesDev = lossP * Math.pow(0 - percentage, 2);
              const stdDeviation = Math.sqrt(winsDev + drawsDev + lossesDev) / Math.sqrt( total );

              const confidenceP = 0.95;
              const minConfidenceP = (1 - confidenceP) / 2;
              const maxConfidenceP = 1 - minConfidenceP;
              const devMin = percentage + phiInv(minConfidenceP) * stdDeviation;
              const devMax = percentage + phiInv(maxConfidenceP) * stdDeviation;

              const difference = CalculateEloDifference(devMax) - CalculateEloDifference(devMin);

              return Math.round(difference / 2);
            }


            function phiInv( p )
            {
              return Math.sqrt(2) * CalculateInverseErrorFunction(2 * p - 1);
            }

            function CalculateInverseErrorFunction( x )
            {
              const pi = Math.PI;
              const a = 8 * (pi - 3) / (3 * pi * (4 - pi));
              const y = Math.log(1 - x * x);
              const z = 2 / (pi * a) + y / 2;

              const ret = Math.sqrt( Math.sqrt(z * z - y / a) - z);

              if (x < 0)
                return -ret;

              return ret;
            }

            function CalculateEloDifference( percentage )
            {
               return -400 * Math.log(1 / percentage - 1) / Math.LN10;
            }

            const wins = ${{ inputs.wins }};
            const draws = ${{ inputs.draws }};
            const losses = ${{ inputs.losses }};
            const eloDifference = CalculateElo(wins, draws, losses) + ' Â±' + CalculateErrorMargin(wins, draws, losses);
            console.log(eloDifference);
            return eloDifference;


  notice:
    runs-on: ubuntu-latest
    needs: prepare
    env:
      WINS: ${{ inputs.wins }}
      DRAWS: ${{ inputs.draws }}
      LOSSES: ${{ inputs.losses }}
      OPPONENT: ${{ inputs.opponent }}
      ELO_DIFFERENCE: ${{ needs.prepare.outputs.elo_difference }}
    steps:
      - run: |
          echo "::notice title=Results against $OPPONENT::$WINS wins, $DRAWS draws, $LOSSES losses -> $ELO_DIFFERENCE elo"

  publish:
    if: github.event_name == 'pull_request' || github.event_name == 'issue_comment'
    runs-on: ubuntu-latest
    needs: prepare
    env:
      OPPONENT: ${{ inputs.opponent }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          ref: ${{ inputs.head_ref }}

      - name: Calculate and export context
        id: prepare
        run: |
          LAST_COMMIT_SHA=${{ github.event.pull_request.head.sha || '$(git rev-parse @)' }}
          SHORT_SHA=$(echo $LAST_COMMIT_SHA | cut -c 1-7)
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Adjust opponent
        id: opponent_adjust
        if: contains(inputs.opponent, 'https')
        run: |
          OPPONENT_NAME=$(echo $OPPONENT | grep -oP 'githubusercontent\.com/\K[^/]*/[^/]*' || echo '')
          OPPONENT_NAME=$( [ $OPPONENT_NAME ] && echo $OPPONENT_NAME || echo $OPPONENT | grep -oP 'github\.com/\K[^/]*/[^/]*' || echo '')
          OPPONENT_NAME=$( [ $OPPONENT_NAME ] && echo $OPPONENT_NAME || echo RemoteOpponent )
          echo "opponent=[$OPPONENT_NAME]($OPPONENT)" >> $GITHUB_OUTPUT

      - name: Edit PR
        uses: actions/github-script@v6
        with:
          script: |
            const opponent = '${{ steps.opponent_adjust.outputs.opponent || inputs.opponent }}';
            const wins = '${{ inputs.wins }}';
            const draws = '${{ inputs.draws }}';
            const losses = '${{ inputs.losses }}';
            const eloDifference = '${{ needs.prepare.outputs.elo_difference }}';
            const shortSha = '${{ steps.prepare.outputs.short_sha }}';
            const pull_number = ${{ github.event.pull_request.number || github.event.issue.number || 'null' }};

            if (!pull_number) return;

            getNewContent = (existingContent) => {
              let newContent = existingContent;
              let benchmarkIndexStart = existingContent.indexOf('<!-- benchmark start -->');
              let benchmarkIndexEnd = existingContent.indexOf('<!-- benchmark end -->');
              let benchmarkSection = '';

              const newLine = `| ${opponent} | ${wins} | ${draws} | ${losses} | ${shortSha} | ${eloDifference} |\n`;

              if (benchmarkIndexStart === -1) {
                // Benchmark section does not exist. Add it.
                benchmarkSection = `\n<!-- benchmark start -->\n| Opponent | Wins | Draws | Losses | Commit | Elo Difference |\n| --- | --- | --- | --- | --- | --- |\n${newLine}<!-- benchmark end -->\n`;
                newContent += benchmarkSection;
              } else {
                // Benchmark section exists. Update it.
                benchmarkSection = existingContent.slice(benchmarkIndexStart + 23, benchmarkIndexEnd);
                let opponentIndex = benchmarkSection.indexOf(`| ${opponent} |`);

                if (opponentIndex === -1) {
                  // Opponent row does not exist. Add it.
                  benchmarkSection += newLine;
                } else {
                  // Opponent row exists. Update it.
                  const opponentIndexEnd = benchmarkSection.indexOf('\n', opponentIndex);
                  benchmarkSection = benchmarkSection.slice(0, opponentIndex) + newLine + benchmarkSection.slice(opponentIndexEnd+1);
                }

                newContent = existingContent.slice(0, benchmarkIndexStart + 23) + benchmarkSection + existingContent.slice(benchmarkIndexEnd);
              }
              return newContent;
            }

            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pull_number
            });
            const newContent = getNewContent(pr.data.body || '');
            github.rest.pulls.update({
              pull_number: pull_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: newContent
            });

      - name: Edit Comment
        if: github.event_name == 'issue_comment'
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ github.event.comment.id }}
          body: |
            | Opponent | Wins | Draws | Losses | Commit | Elo Difference |
            | --- | --- | --- | --- | --- | --- |
            | ${{ steps.opponent_adjust.outputs.opponent || inputs.opponent }} | ${{ inputs.wins }} | ${{ inputs.draws }} | ${{ inputs.losses }} | ${{ steps.prepare.outputs.short_sha }} | ${{ needs.prepare.outputs.elo_difference }} |

  react:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' || github.event_name == 'pull_request'
    steps:
      - name: Update comment
        uses: peter-evans/create-or-update-comment@v3
        if: github.event_name == 'issue_comment'
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: hooray
          reactions-edit-mode: replace
      - name: Update PR
        uses: aidan-mundy/react-to-issue@v1.1.1
        if: github.event_name == 'pull_request' && false # does not currently support replacing reactions
        with:
          issue-number: ${{ github.event.pull_request.number }}
          reactions: hooray
